#include "OLED.h"

OLED Display;
void Demo();
void draw_lines(void);

void draw_rects(void);

void draw_circles(void);

void draw_wheels(void);

void draw_lines_flower1(void);

void draw_lines_flower(void);
void Rainbow(void);


const unsigned char Icon24x24x64k[] ={
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0x7b,0xf7,0xd6,0xee,0x73,0xe6,0x52,0xe6,0x51,0xe6,0x93,0xe6,0xd6,0xee,0x7b,0xf7,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x18,0xef,0x30,0xde,
  0x0e,0xe6,0x6f,0xee,0x8f,0xee,0xd0,0xf6,0xf0,0xf6,0x90,0xee,0x6f,0xee,0x0e,0xe6,
  0x10,0xe6,0xf8,0xee,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xbd,0xff,0x52,0xe6,0x0e,0xe6,0xf1,0xf6,
  0x50,0xff,0x2e,0xff,0x0c,0xff,0xec,0xfe,0xec,0xfe,0xec,0xfe,0x0d,0xff,0x10,0xff,
  0xd0,0xf6,0x0d,0xe6,0x31,0xe6,0xbd,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0x9c,0xf7,0xef,0xdd,0x8f,0xee,0x2f,0xff,0xcb,0xfe,
  0xa8,0xfe,0xc8,0xfe,0xa8,0xfe,0xa8,0xfe,0xa7,0xfe,0xa7,0xfe,0x87,0xfe,0x87,0xfe,
  0x8a,0xfe,0xee,0xfe,0x4d,0xee,0xae,0xdd,0x9d,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xbd,0xff,0xef,0xdd,0x8e,0xf6,0x0c,0xff,0xa8,0xfe,0xa8,0xfe,
  0xa9,0xfe,0xc8,0xfe,0xa9,0xfe,0xa8,0xfe,0xa8,0xfe,0xa8,0xfe,0x68,0xfe,0x67,0xfe,
  0x66,0xfe,0x66,0xfe,0xaa,0xfe,0x2c,0xee,0xce,0xdd,0xbd,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0x93,0xe6,0x6c,0xee,0x0b,0xff,0xa8,0xfe,0xa9,0xfe,0xc9,0xfe,
  0xa9,0xfe,0xa8,0xfe,0xa8,0xfe,0xa8,0xfe,0xa8,0xfe,0x88,0xfe,0x67,0xfe,0x67,0xfe,
  0x67,0xfe,0x47,0xfe,0x06,0xfe,0x68,0xfe,0x0b,0xee,0x73,0xe6,0xff,0xff,0xff,0xff,

  0xff,0xff,0x5a,0xf7,0x0b,0xe6,0xca,0xfe,0xa8,0xfe,0xa9,0xfe,0xc9,0xfe,0xc9,0xfe,
  0xc8,0xfe,0xc8,0xfe,0xa8,0xfe,0xa8,0xfe,0x88,0xfe,0x67,0xfe,0x87,0xfe,0x87,0xfe,
  0x26,0xfe,0x26,0xfe,0x26,0xfe,0x25,0xfe,0x28,0xfe,0xaa,0xe5,0x39,0xef,0xff,0xff,

  0xff,0xff,0x52,0xe6,0x89,0xf6,0xe8,0xfe,0xc9,0xfe,0xa9,0xfe,0xa9,0xfe,0x88,0xfe,
  0xc6,0xe5,0x27,0xee,0xa8,0xfe,0x67,0xfe,0x67,0xfe,0x67,0xfe,0xe6,0xed,0x65,0xe5,
  0x26,0xfe,0x26,0xfe,0x26,0xfe,0xe6,0xfd,0xe5,0xfd,0xa6,0xf5,0x31,0xde,0xff,0xff,

  0x9d,0xf7,0xeb,0xe5,0x87,0xfe,0xc7,0xfe,0xc8,0xfe,0xa8,0xfe,0xe8,0xfe,0x45,0xd5,
  0xc0,0x8a,0xa2,0xab,0x47,0xf6,0x87,0xfe,0x87,0xfe,0x06,0xf6,0x82,0xa3,0xe1,0x92,
  0x24,0xdd,0x26,0xfe,0xe6,0xfd,0xe5,0xf5,0xa4,0xfd,0x44,0xfd,0x49,0xdd,0x9d,0xf7,

  0x19,0xef,0x86,0xe5,0x87,0xfe,0x67,0xfe,0x87,0xfe,0x87,0xfe,0xa7,0xfe,0xe3,0xb3,
  0x80,0x8a,0xc0,0x92,0xa6,0xe5,0x67,0xfe,0x87,0xfe,0x45,0xe5,0xc0,0x92,0xa0,0x8a,
  0x23,0xbc,0x06,0xfe,0xa5,0xf5,0x84,0xf5,0x44,0xf5,0x23,0xfd,0xe4,0xdc,0x39,0xef,

  0xd7,0xee,0xc5,0xe5,0x87,0xfe,0x67,0xfe,0x67,0xfe,0x67,0xfe,0x87,0xfe,0x66,0xbc,
  0x00,0x72,0xe2,0x8a,0xc8,0xed,0x06,0xfe,0x06,0xfe,0x87,0xed,0xc2,0x8a,0x40,0x72,
  0x45,0xc4,0xa5,0xfd,0x64,0xf5,0x64,0xf5,0x24,0xf5,0x03,0xfd,0xc3,0xe4,0xd5,0xee,

  0x95,0xe6,0xe5,0xed,0x87,0xfe,0x67,0xfe,0x67,0xfe,0x47,0xfe,0x26,0xfe,0x2b,0xf6,
  0xec,0xbc,0x8c,0xd5,0x07,0xfe,0xe5,0xfd,0xc4,0xfd,0xc6,0xfd,0x2b,0xcd,0xab,0xbc,
  0x89,0xf5,0x63,0xfd,0x44,0xf5,0x24,0xf5,0x24,0xf5,0x23,0xfd,0xc2,0xe4,0x73,0xe6,

  0xb6,0xee,0xa5,0xed,0x67,0xfe,0x67,0xfe,0x27,0xfe,0x26,0xfe,0x26,0xfe,0x26,0xfe,
  0x8b,0xfe,0x49,0xfe,0xe5,0xfd,0xc6,0xf5,0xa5,0xfd,0x84,0xf5,0xe7,0xfd,0x09,0xfe,
  0x64,0xfd,0x43,0xf5,0x24,0xf5,0x04,0xf5,0x24,0xf5,0x23,0xf5,0xc2,0xe4,0x94,0xe6,

  0xf8,0xee,0x85,0xe5,0x46,0xfe,0x27,0xfe,0x26,0xfe,0x25,0xfe,0xe5,0xf5,0xe6,0xf5,
  0xe6,0xfd,0xe6,0xfd,0xe7,0xfd,0xc7,0xfd,0xa7,0xfd,0xa6,0xfd,0x65,0xf5,0x44,0xf5,
  0x24,0xed,0x23,0xfd,0x24,0xfd,0x24,0xf5,0x04,0xf5,0x03,0xfd,0xa3,0xe4,0xf7,0xee,

  0x5b,0xf7,0x87,0xe5,0x26,0xfe,0x26,0xfe,0x26,0xfe,0x45,0xdd,0xe6,0xd4,0xe6,0xfd,
  0x07,0xfe,0x29,0xfe,0x2b,0xfe,0x2b,0xfe,0x0b,0xfe,0xe9,0xfd,0xc8,0xfd,0x86,0xfd,
  0xe5,0xe4,0x44,0xcc,0x03,0xf5,0x24,0xf5,0x04,0xf5,0xe3,0xfc,0xc5,0xdc,0x5b,0xf7,

  0xff,0xff,0xcd,0xdd,0xe5,0xf5,0x26,0xfe,0xe5,0xf5,0x07,0xcd,0x49,0xdd,0xe5,0xd4,
  0x05,0xdd,0x87,0xed,0xea,0xf5,0x2c,0xfe,0x0c,0xfe,0xa9,0xf5,0x46,0xed,0x83,0xd4,
  0x86,0xcc,0xa8,0xcc,0xa3,0xe4,0x03,0xfd,0x03,0xfd,0xc3,0xf4,0x6b,0xdd,0xde,0xff,

  0xff,0xff,0x95,0xe6,0x86,0xe5,0x06,0xfe,0xe6,0xfd,0xa8,0xed,0xe7,0xfd,0xa9,0xe5,
  0xe9,0xcc,0x67,0xbc,0x67,0xbc,0x67,0xbc,0x47,0xbc,0x27,0xb4,0x47,0xb4,0xc9,0xc4,
  0x48,0xed,0x26,0xf5,0x04,0xf5,0x03,0xfd,0x03,0xfd,0xc4,0xe4,0x95,0xe6,0xff,0xff,

  0xff,0xff,0xbe,0xff,0xac,0xdd,0xc6,0xf5,0xe6,0xfd,0xc6,0xfd,0x85,0xfd,0xc5,0xfd,
  0xc7,0xfd,0xe9,0xf5,0xca,0xf5,0x8a,0xed,0x6a,0xed,0x8a,0xed,0xa9,0xf5,0x66,0xfd,
  0x23,0xfd,0x04,0xf5,0x03,0xf5,0x03,0xfd,0x04,0xf5,0x6a,0xdd,0xbe,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0x19,0xef,0x47,0xdd,0xc6,0xfd,0xa5,0xfd,0x64,0xf5,0x65,0xf5,
  0x64,0xf5,0x43,0xfd,0x23,0xfd,0x23,0xfd,0x23,0xfd,0x03,0xfd,0x02,0xfd,0x03,0xf5,
  0x03,0xf5,0x03,0xf5,0x23,0xfd,0x25,0xfd,0xe6,0xdc,0x18,0xef,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xb5,0xe6,0x26,0xd5,0xc7,0xf5,0x85,0xfd,0x44,0xf5,
  0x24,0xf5,0x44,0xf5,0x23,0xf5,0x24,0xf5,0x23,0xf5,0x23,0xf5,0x03,0xf5,0xe3,0xf4,
  0xe3,0xf4,0x45,0xfd,0x66,0xf5,0xe5,0xdc,0x95,0xee,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xb6,0xe6,0x49,0xdd,0x87,0xf5,0xa7,0xfd,
  0x66,0xfd,0x24,0xf5,0x23,0xf5,0x23,0xf5,0x03,0xf5,0xe3,0xf4,0x04,0xf5,0x46,0xfd,
  0x67,0xfd,0x46,0xed,0x07,0xd5,0xb6,0xe6,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x5a,0xf7,0xce,0xdd,0x27,0xdd,
  0x47,0xed,0x67,0xf5,0x87,0xfd,0x67,0xfd,0x67,0xfd,0x87,0xfd,0x67,0xfd,0x46,0xed,
  0x06,0xdd,0xad,0xdd,0x3a,0xf7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x19,0xef,
  0x10,0xe6,0x6b,0xdd,0x49,0xe5,0x48,0xe5,0x28,0xe5,0x48,0xdd,0x6a,0xdd,0x10,0xe6,
  0x18,0xef,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0x7c,0xf7,0x5a,0xf7,0x5a,0xef,0x7c,0xf7,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0x7c,0xf7,0x5a,0xf7,0x5a,0xef,0x7c,0xf7,0xff,0xff,0xff,0xff,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
};

char Buff[255];
int BuffPtr=0;


void setup() {
        Display.setup();
          Serial.begin(115200);
          Serial.println("started");
          Buff[0]=0;
}

void loop() {
    Demo();
}
void Demo() {
long i;

  Display.Clear_Window(0x00,0x83,0x00,0x83);
  delay(10);
  Display.SetColour(OLED_BLUE);
  Display.printxy(100,80,"A");
  delay(500);
  while(1)
  if (Serial)   {
    char ch = Serial.read();
    if (ch==-1) {
        if (BuffPtr!=0) {
            BuffPtr = 0;         
            Display.DrawPath(Buff);
        }
        continue;
    }
delay(10);
    Buff[BuffPtr++]=ch;
    if(BuffPtr>200) BuffPtr=0;
    Buff[BuffPtr]=0;    
  }

  return;
  draw_lines_flower1();
  delay(100);
  draw_lines_flower();
  delay(100);
  draw_lines();

  Display.Clear_Window(0x00,0x83,0x00,0x83);
  delay(10);
  draw_rects();

  Display.Clear_Window(0x00,0x83,0x00,0x83);
  delay(10);
  draw_circles();

  Display.Clear_Window(0x00,0x83,0x00,0x83);
  delay(10);
  draw_wheels();

  // do filling color
  Display.SetFill(true);
  for(int i=0;i<8;i++)
  {
  Display.SetFillColour(MAKECOLOR64k(i & 4 ? 0xff : 0x00,i & 2 ? 0xff : 0x00,i & 1 ? 0xff : 0x00));
  Display.Fill_Block(0,0,Max_Column,Max_Row);
  delay(500);
  }
  Display.Clear_Window(0x00,0x83,0x00,0x83);
  delay(10);
  Rainbow();
  delay(500);

  // show icon
 Display.Show_64k_Pattern_LittleEndia((unsigned char *)Icon24x24x64k,50,50,50+23,50+23);
delay(500);
}
void draw_lines(void)
{
  unsigned char x1,y1,x2,y2;
  unsigned short int i;

  // draw unfilled rectangles
  Display.SetFill(false);
  for (i=0; i<2000; i++) {
    x1=rand()%127;
    x2=rand()%127;
    y1=rand()%127;
    y2=rand()%127;
    Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.Line(min(x1,x2),min(y1,y2),max(x1,x2),max(y1,y2));
  }
}

void draw_rects(void)
{
  unsigned char x1,y1,x2,y2;
  unsigned short int i;

  // draw unfilled rectangles
  Display.SetFill(false);
  for (i=0; i<2000; i++) {
    x1=rand()%127;
    x2=rand()%127;
    y1=rand()%127;
    y2=rand()%127;
    Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.SetFillColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.Rectangle(min(x1,x2),min(y1,y2),max(x1,x2),max(y1,y2));
  }

  // draw filled rectangles
  Display.SetFill(true);
  for (i=0; i<2000; i++) {
    x1=rand()%127;
    x2=rand()%127;
    y1=rand()%127;
    y2=rand()%127;
    Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.SetFillColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.Rectangle(min(x1,x2),min(y1,y2),max(x1,x2),max(y1,y2));
  }
}

void draw_circles(void)
{
  unsigned char x,y,r;
  unsigned short int i;

  // draw unfilled circles
  Display.SetFill(false);
  for (i=0; i<2000; i++) {
    x=rand()%128;
    y=rand()%128;
    r=rand()%60;
    Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.Circle(x, y, r);
  }

  // draw filled circles
  Display.SetFill(true);

  for (i=0; i<2000; i++) {
    x=rand()%128;
    y=rand()%128;
    r=rand()%60;
    Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.SetFillColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.Circle(x, y, r);
  }
}

void draw_wheels(void)
{
  float al,pi=3.14159;
  unsigned char l=25, x,y,i;

  Display.SetFill(false);
  for (i=0; i<30; i++) {
    for (al=0; al<2*pi; al+=pi/24.0) {
      x=(unsigned char)(l*cos(al))+64;
      y=(unsigned char)(64-l*sin(al));
      Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
      Display.Circle(x,y, 25);
    }
  }
}

void draw_lines_flower1(void)
{
  float pi=3.14159,al,f;
  unsigned char x1,y1,x2,y2, d=30;

  for(al=0.0; al<pi*2; al+=pi/360) {
    f=(d*(1.0+1.0/4.0*cos(12.0*al)))*(1.0+sin(4.0*al));
    x1=64+f*cos(al);
    x2=64+f*cos(al+pi/5.0);
    y1=64-f*sin(al);
    y2=64-f*sin(al+pi/5.0);
    Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.Line(x1,y1,x2,y2);
  }
}

void draw_lines_flower(void)
{
  float pi=3.14159,al,f;
  unsigned char x1,y1,x2,y2, d=30;

  for(al=0.0; al<pi*2; al+=pi/360) {
    f=(d*(1.0+sin(4.0*al)));
    x1=64+f*cos(al);
    x2=64+f*cos(al+pi/5.0);
    y1=64-f*sin(al);
    y2=64-f*sin(al+pi/5.0);
    Display.SetColour(MAKECOLOR64k(rand(), rand(),rand()));
    Display.Line(x1,y1,x2,y2);
  }
}

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//  Show Color Bar (Full Screen)
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
void Rainbow(void)
{
    Display.SetFill(true);
    unsigned char col = 0;
    unsigned short fc[8] = {MAKECOLOR64k(0xFF,0xFF,0xFF),// white
                            MAKECOLOR64k(0xFF,0xFF,0x0),// yellow
                            MAKECOLOR64k(0xFF,0x0,0xFF),// purple
                            MAKECOLOR64k(0x0,0xff,0xFF),// cyan
                            MAKECOLOR64k(0xFF,0x0,0x00),// red
                            MAKECOLOR64k(0x00,0xff,0x00),// green
                            MAKECOLOR64k(0x00,0x00,0xFF),// blue
                            MAKECOLOR64k(0x00,0x0,0x00)// black

                            };

  // White => Column 1~16
    for(int i=0;i<8;i++)    {
    Display.SetFillColour(fc[i]);
    Display.Rectangle(col,0,col+15,Max_Row);
    col += 16;
    }
}
void Rainbow1(void)
{
    Display.SetFill(false);
    int ncols = 3;
    int colw = Max_Column / ncols;
        for(int c=0;c<ncols;c++)    {
            for(int r=0;r<Max_Row;r++)  {
                Display.SetColour(255/(c+1),0,r*2);
                Display.Line(colw*c,r,colw*(c+1)-1,r);
            }
        }
}
